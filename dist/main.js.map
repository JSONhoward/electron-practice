{"version":3,"sources":["webpack://electron-practice/./node_modules/electron-is-dev/index.js","webpack://electron-practice/./src/Electron/Main/Main.ts","webpack://electron-practice/./src/main.ts","webpack://electron-practice/external \"electron\"","webpack://electron-practice/webpack/bootstrap","webpack://electron-practice/webpack/startup"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,iEAAiD;AACjD,+HAAmC;AAEnC,IAAM,YAAY,GAAG;IACjB,MAAM,EAAE,GAAG;IACX,KAAK,EAAE,GAAG;IACV,IAAI,EAAE,KAAK;IACX,eAAe,EAAE,SAAS;IAC1B,cAAc,EAAE;QACZ,eAAe,EAAE,IAAI;QACrB,gBAAgB,EAAE,KAAK;KAC1B;CACJ;AAED;IAII,oBAAY,GAAiB;QAH7B,WAAM,GAAkC,IAAI;QAIxC,IAAI,CAAC,GAAG,GAAG,GAAG;IAClB,CAAC;IAEO,sCAAiB,GAAzB;QACI,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;SAClB;IACL,CAAC;IAEO,4BAAO,GAAf;QACI,IAAI,CAAC,MAAM,GAAG,IAAI;IACtB,CAAC;IAEO,iCAAY,GAApB;QAAA,iBAMC;QALG,IAAI,CAAC,MAAM,GAAG,IAAI,wBAAa,cAAM,YAAY,EAAG;QACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAK,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,YAAU,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAa,CAAC;QACpG,yBAAK,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE;QAC/C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,mCAAM,KAAI,CAAC,MAAM,0CAAE,IAAI,KAAE,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC;IAC1C,CAAC;IAEO,8BAAS,GAAjB;QACI,kBAAO,CAAC,EAAE,CAAC,cAAc,EAAE,UAAC,KAAK,EAAE,GAAG;YAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;YAChB,KAAK,CAAC,KAAK,CAAC,oBAAoB,EAAE,MAAM,CAAC;QAC7C,CAAC,CAAC;IACN,CAAC;IAEK,0BAAK,GAAX;;;;;4BACI,qBAAM,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;;wBAA1B,SAA0B;wBAE1B,IAAI,CAAC,YAAY,EAAE;wBACnB,IAAI,CAAC,SAAS,EAAE;wBAChB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC,iBAAiB,CAAC;wBACxD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE;4BACpB,IAAI,wBAAa,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gCAC1C,KAAI,CAAC,YAAY,EAAE;6BACtB;wBACL,CAAC,CAAC;;;;;KACL;IACL,iBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;AC3DD,iEAA8B;AAC9B,6GAA6C;AAE7C,IAAM,IAAI,GAAG,IAAI,cAAU,CAAC,cAAG,CAAC;AAChC,IAAI,CAAC,KAAK,EAAE;;;;;;;;;;;ACJZ,sC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCrBA;UACA;UACA;UACA","file":"main.js","sourcesContent":["'use strict';\nconst electron = require('electron');\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = Number.parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !electron.app.isPackaged;\n","import { BrowserWindow, ipcMain } from 'electron'\nimport isDev from 'electron-is-dev'\n\nconst defaultProps = {\n    height: 600,\n    width: 800,\n    show: false,\n    backgroundColor: '#2d2d2d',\n    webPreferences: {\n        nodeIntegration: true,\n        contextIsolation: false\n    }\n}\n\nexport default class MainWindow {\n    window: Electron.BrowserWindow | null = null\n    App: Electron.App\n\n    constructor(app: Electron.App) {\n        this.App = app\n    }\n\n    private onWindowAllClosed() {\n        if (process.platform !== 'darwin') {\n            this.App.quit()\n        }\n    }\n\n    private onClose() {\n        this.window = null\n    }\n\n    private createWindow() {\n        this.window = new BrowserWindow({ ...defaultProps })\n        this.window.loadURL(isDev ? 'http://localhost:9000/' : `file://${this.App.getAppPath()}/index.html`)\n        isDev && this.window.webContents.openDevTools()\n        this.window.on('ready-to-show', () => this.window?.show())\n        this.window.on('closed', this.onClose)\n    }\n\n    private messaging() {\n        ipcMain.on('test-message', (event, arg) => {\n            console.log(arg)\n            event.reply('test-message-reply', 'pong')\n        })\n    }\n\n    async start() {\n        await this.App.whenReady()\n\n        this.createWindow()\n        this.messaging()\n        this.App.on('window-all-closed', this.onWindowAllClosed)\n        this.App.on('activate', () => {\n            if (BrowserWindow.getAllWindows.length === 0) {\n                this.createWindow()\n            }\n        })\n    }\n}","import { app } from 'electron'\nimport MainWindow from './Electron/Main/Main'\n\nconst MAIN = new MainWindow(app)\nMAIN.start()","module.exports = require(\"electron\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main.ts\");\n"],"sourceRoot":""}